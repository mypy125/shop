buildscript {
    ext {
        springBootVersion = '2.7.7'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'io.micronaut:micronaut-inject-groovy:3.10.3'
    }
}
plugins {
    id "groovy"
    id "org.grails.grails-gsp"
    id "org.grails.grails-web"
    id "war"
    id "idea"
    id "com.bertramlabs.asset-pipeline"
    id "application"
    id "eclipse"
}

group = "com.daniam"

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core/" }
}
dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:4.0.11"
        mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
    }
    applyMavenExclusions false
}
configurations {
    all {
    }
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.codehaus.groovy:groovy")
    implementation("org.grails:grails-core")
    implementation("org.grails:grails-logging")
    implementation("org.grails:grails-plugin-databinding")
    implementation("org.grails:grails-plugin-i18n")
    implementation("org.grails:grails-plugin-interceptors")
    implementation("org.grails:grails-plugin-rest")
    implementation("org.grails:grails-plugin-services")
    implementation("org.grails:grails-plugin-url-mappings")
    implementation("org.grails:grails-web-boot")
    implementation("org.grails.plugins:gsp")
    implementation("org.grails.plugins:hibernate5")
    implementation("org.grails.plugins:scaffolding")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-autoconfigure")
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-jetty")
    implementation("org.springframework.boot:spring-boot-starter-logging")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    compileOnly("io.micronaut:micronaut-inject-groovy")
    console("org.grails:grails-console")
    runtimeOnly("com.bertramlabs.plugins:asset-pipeline-grails:4.3.0")
    runtimeOnly("org.apache.tomcat:tomcat-jdbc")
    runtimeOnly("org.fusesource.jansi:jansi:1.18")
    runtimeOnly("org.postgresql:postgresql")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.restdocs:spring-restdocs-mockmvc")
    testImplementation("org.spockframework:spock-core:2.0-groovy-3.0")
    testImplementation("org.spockframework:spock-spring:2.0-groovy-3.0")
    testImplementation("io.micronaut:micronaut-inject-groovy")
    testImplementation("org.grails:grails-gorm-testing-support")
    testImplementation("org.grails:grails-web-testing-support")
    testImplementation("org.junit.jupiter:junit-jupiter:5.10.2")
    testImplementation("io.micronaut:micronaut-http-client")
    testImplementation("org.mockito:mockito-core:5.11.0")
    testImplementation("com.h2database:h2")
}

//application {
//    mainClass.set("com.daniam.Application")
//}

java {
    sourceCompatibility = JavaVersion.toVersion("11")
}
bootRun {
    jvmArgs(
            '-Dspring.output.ansi.enabled=always',
            '-noverify',
            '-XX:TieredStopAtLevel=1',
            '-Xmx1024m',
            '-Xms256m',
            '-Xmn128m',
            '-XX:+CMSClassUnloadingEnabled'
    )
    sourceResources sourceSets.main
    classpath = sourceSets.main.runtimeClasspath
}
tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-noverify']
    }
}
test {
    useJUnitPlatform()
}
assets {
    minifyJs = true
    minifyCss = true
}
